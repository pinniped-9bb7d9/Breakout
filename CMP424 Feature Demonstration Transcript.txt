Hello, this is the video for the future demonstration of the power up UI at Progress bar so currently the way the framework is set up is that you have the UI class that handles the display of a piece of text that tells you what the m is and a timer with the color based on a switch case and I want to adapt that to be essentially the exact same except it just updates the color of a progress bar. So um what I'm going to do is I'm going to create a reusable decoupled progress bar class um with basic setters that are just abstractions of the SFL setters for wrecked um outline, uh fill color, position, and I'll have it so the progress bar has a health from zero to one, which is um the percentage of how much of it is displayed. And it'll have a max length that's that when it's initialized and there'll be no um hardcoded logic within the progress class and how it calculates its health.  There'll just be an update um set for its health that it's up to the game to call to make sure that the progress program gets update accordingly. Once I've done that um the thing that I realized was that there was no way to be able to figure out the calculate the health from within the UI class because there wasn't the power the objects that held the power of didn't contain what their initial time was. It only contains the time they have left.  So in order to fix that, I checked all the power ups and order that they all were set to have the same amount of activation time anyway. So I made that constant and the Constance had her file and then replaced the magic numbers within all the power of am classes with that constant, and then use that to be able to calculate the health every frame for the progress bar within the UI class. After I did that, I went into the game manager and simply swapped the update uh progress at power up text method to the upgrade, uh update power up. bar and after I created in nationalization on any statated an object of the progress bar class within the UI called um Power bar and so it was decoupled enough that I only had to change one line of code within the game manager in order to get it to work.  In terms of performance considerations, uh the performance the progress were only updates when the power up is active. So because I copied the pretty much copied um the update Powerwork text method, which does the same thing, uh it means that I only uh there's no any wased um CPU on having to render that every frame. I also um encountered a we error where due to um floating point in precision, the um progress bar wouldn't fully disappear um when the power is finished it would still have a little slither left over and I fixed that by creating a condition within the UI class that um set the health directly to zero if there was no um progress bar, if there was no power of active. and that helped and that made it so it manually updated to be exactly zero.  So within the progresso class at Uton in the longer display. It avoids unnecessary memory allocations because it's just um essentially it once in the UI class and then never again, I don't do it. For example, like per power activation.  There's always just one power bar, that just gets continuously updated in terms of impact and clear experience, uh, it improves emersgin and responsiveness by having less visual load however, it does make it less accessible for visually imaired folk potentially fix that as um adding visual effects the outline and it could be extended to other health elements like a health bar although that isn't really applicable here because you just have free lives so the three dotss are um more appropriate. Thank you.